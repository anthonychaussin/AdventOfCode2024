using System.Collections.Concurrent;
using System.Data;
using System.Drawing;
using System.Net.Http.Headers;
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;

namespace AdventOfCode2024
{
    public partial class Day6
    {
        private string testMap = @"....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...";
        private string map = @"..#.........#...#......#...........#.#...#............#...#.........#....#......................#......#..........................
...........#....#.............#.....................................#............................................#.....#..........
.................#.........#.......#.......#..#............#.........#.........#............................................#.....
......#................................#.........................................#................................................
#...............................##......#.#...........................#....................#...#...............#.................#
.............#......#...........................................#..............#..........#..............#........................
...#...................#..............#........#.......#..........#.........................#.#.....#.....#.......................
#.#...#.............................#.................................................#..............#............#...............
.............................#.......#.............#......#...............#.....#.................................................
....................................#.....................................#.................#........#..........#.#..#...........#
......................#......#...............................#.................#.......#......................#.......#...........
...#..............#....................#............#...........##..#.....................................................#.......
....#.........#...................................#................................................#..........................#...
..............#.....#.................................................................#..#.....##.......#.........................
.........#....#...........##..........................................#......#.....................#..........#.......#...........
..#....#..........#.................................................................#....#............#............#........#.....
............#.#....#...........#.............#...........#..................#.....#.................................#.......#.....
..........#.......#............................#........#...........#.......#...#....#........#.............##.#............#.....
...................#.........#....#.....................................................................#.#..........#............
.#...#.#..................#...............................................#...........................#......................#....
.........#..............#.........#.......#.#......##..................#......#...#..#...........#.....................#..........
...............................#.............#..#......#............#..........#......................#..........#.............#..
..........#.....#..........................#..................................................#.#..#.....#........................
............#..##.................................#....................#.....#.......................................#............
......................#.#...................#......#..............................................................#...............
.......#.............................................................................#............................................
........#.................#....................................................#.......................................#....##.#..
..................#........................#......#..##....#.........#...##..#....................................#...............
.............#..............................................................................##...#......#.................#.......
..................................#.#.............................................................................#...............
...........#.................................#.......................................................................#......#.....
.....#............................................................#................................................#..............
.....#...........#.#..........#..............#..........................#.................................................#.......
....#........#...#..........#..#..........................................................................#.......................
.........................................................................#.....#.......................................#....#.....
...............#...#..#.....#.......................#.................#........#..........##....................................#.
.......................#....#...#..................#..................#.....................................#.............#.......
...........#..#...#..............................................^........#........................#......................#.......
.............................................#.................................................................................#..
......#...#.........#.....................................#...............................................#..#....#.......#.......
...#......................................................#.................#..#.............................................#....
.....#......................#.......................................#.............................................#....#..........
...#.....................................................#......#...#.......#....#..............................#....#............
......#.....#.....#...........#...#................#...........................................#..................................
...................................#...............#......................................................#.......................
..............................#...#........................................................#.#.............#......................
......#.......#............#..#......................#..#.....#..................#......#.........................................
#......#....#.......#....................#.....#.#............................................................................#...
.#....#...................................#.................#....................#........................................#.......
............................................#...................................#.......#..............#.........................#
............##.........#..............................................................................#.........#.................
##.................................................#.......................#.#.....#..............................................
...........................#..........#...#.#.........................#.................................##.....#..................
.............#..........#........................................#............#............#.....................................#
.....................................................#.................................................#..........................
.....#........................................#.............................#...#.....................#...........................
.......#..................................#...........#.......#.....#........................................#.......#............
.............#.......................#......................#.....#.......#..................................#..#........#........
.......................................................#......#...............#.........#.............#............#..............
....#...............................#.#.....................#.................................................................#..#
...........................#........#..........................................#........................................#.........
....#.............................................................................................................................
.##........#.......#..................#.#....#.............................................................#.##...................
.#..#.......................##........................................................#...............................#...........
.....#.#..............#...........................................#...............................................................
.....#.#............................#.............................................................................................
......................#............................#....#............................................................#............
.......#.......................................................................#..................#...##..........................
...............#...................................................#.....................................#...............#.#......
....#..........#.......#..#................................#......................................................................
#......##..................................................................#...#........................#.........................
..................................#........................................................................#...........#......#...
.#....................#....#..................................#..#..................#.#.......................#...................
......#..#................................................................................................##......................
.....##........#..#.......................#.........#............#....#...........................................................
...............#...........#.................#...........#.........#.......................#.........#........................#...
............................................................................................#..#..................................
..........................................#.............#..#...............#.............................#.#......#.............#.
......................#............#..........#............................................................#...#................#.
...........#...................#..................................................................................................
.......#........................#.................................................................#.................#.............
#...##................#......................................................................#................................#...
...#.....#.......................#...#..............#....................#.........#.........#....................................
....#.....................................#.............................................................................#.........
.........#..............................................................................#..............#..........................
...................................#.#...............#........................................................................##..
.........#............#..............#..........................................................................#...#.............
.....#.......................#..#....#.#....................#..........................................#..........................
.......................................#........#.........#.....................#.............#...........#...............#.......
................#.................................................................................................................
.......#....................................#..................#...........#.....#.........................#......................
...................#................................................................#...............#................#............
..........#.......................#......................#...........#..#........#....#.........................#.................
...................#........................#.......#................................................#............................
.......................#......................................................#...........#.......#...................#...........
........#..........#........#......#......................#......................................#...............#................
...........................................................#...#..................................................................
.......................#......................#............#..#....#...#............................#.............................
.#.#...............#..........#..........##........#..............................................................................
##.........#....................#...................#.........#......................##..................#...............#........
.#......................#...#...#......................#............#......................#.................#..................#.
#..............................#......................................#.........#.#...............................................
...........#....#......#.......#..........................#..........................................#......#............#..#.....
................................................................................................#.......#.........................
....#..................................#..........................#.................................#...#...#.....................
.......................#.#..#.............................#.#...........................#......#..........#.......................
...##.......................................#..................#....................#.............................................
...#.......#........................#..........##.....#............#......................#.....................................#.
......#..............#.............................#.............................................#.............................#..
#...........................................#.......#....#.#..........#........#............#.......................#.......#.....
..................#.......#............#.....#.............................................................#......................
.#.....................................................................................#...................................#......
...........#.........#.#.................#..........................#............................................#.......##.......
.......................#......#.................................................#........................#.................#......
..................#........................................................#................................................#....#
...............................#.......#....#.........#..........#.....#.......................................#..#...............
......##................##...#....#...#...#............................................................................#..........
.......................#............#...................................#....#.......#.............................#..............
..............................#.........................................................#........#.............#..................
........................#............................................#..................#.....#...................#...............
............#......#...............................#.............................................................................#
.#.........#.........#.........#.......#.#..#...#...............................#.......#.........#..........................#....
........................#.................................................#....................................##......#..........
....#.......#.....................##...#..........................................................................................
.................................#.......................................#.......................#.#......#.......................
.#.............#..................#...........................#.................#...........................................#.....
.....#.........#................#..........#..#..........#......................#...#......................#....#.................
.................#......#.....................................................................#...................................
......................#.......................................................#..#......#..............#..#..#..........#.........
...............................#.........#........#..................#.#.........#.#.#........#..#.........#....##...#............";

        private int PlayerObstacleDetection { get; set; } = 0;
        private int PlayerLoopDetection { get; set; } = 0;
        private int[][] MemoryMap { get; set; }
        private Point gardianPosition;
        private Point GardianPopsition
        {
            get
            {
                return gardianPosition;
            }
            set
            {
                gardianPosition = value;
                if (this.SaveSteps)
                {
                    this.MemoryMap[value.Y][value.X] = 2;
                    GardianSteps.Add(value);
                }
            }
        }
        private List<Point> GardianSteps { get; set; } = [];
        private int Step { get; set; } = 0;
        private int CaseNumber { get; set; } = 0;
        private GARDIAN_DIRECTION GardianDirection { get; set; }
        private Tuple<int, int> MapSize { get; set; }
        public List<Tuple<bool, Point>> ListObstaclePlacing { get; set; } = [];
        public Boolean TestMode { get; set; } = false;
        public Boolean SaveSteps { get; set; } = true;
        public String LastMap { get; private set; }

        public void InitGame()
        {
            this.GardianDirection = GARDIAN_DIRECTION.UP;
            this.GardianSteps = [];
            this.PlayerObstacleDetection = 0;
            this.Step = 0;
            this.MemoryMap = MapConveteur(this.TestMode ? this.testMap : map);
            this.MapSize = new Tuple<int, int>(this.MemoryMap[0].Length, this.MemoryMap.Length);
            this.CaseNumber = this.MapSize.Item1 * this.MapSize.Item2;
            this.gardianPosition.X = this.TestMode ? 4 : 65;
            this.gardianPosition.Y = this.TestMode ? 6 : 37;
            this.GardianPopsition = this.gardianPosition;
        }

        private static int[][] MapConveteur(string map)
        {
            return [.. map
                .Replace('.', '0')
                .Replace('#', '3')
                .Replace('^', '1')
                .Replace('O', '6')
                .Split("\r\n")
                .ToList()
                .ConvertAll(l => l.ToArray().ToList().ConvertAll(c => int.Parse(c.ToString())).ToArray())];
        }

        private char IntToStringConvnerteur(int chunk)
        {
            if(chunk != 2)
            {
                return chunk switch
                {
                    0 => '.',
                    1 => '|',
                    4 => '-',
                    5 => '+',
                    3 => '#',
                    6 => 'O',
                    _ => throw new NotImplementedException(),
                };
            } else
            {
                return this.GardianDirection switch
                {
                    GARDIAN_DIRECTION.UP => '^',
                    GARDIAN_DIRECTION.DOWN => 'V',
                    GARDIAN_DIRECTION.LEFT => '<',
                    GARDIAN_DIRECTION.RIGHT => '>',
                    _ => throw new NotImplementedException(),
                };
            }
        }

        public void Play(bool testMode = false)
        {
            this.TestMode = testMode;
            this.InitGame();
            while (this.Walk())
            {
                if (this.TestMode)
                {
                    Console.Clear();
                    Console.WriteLine(this.MemoryMapToString());
                    Thread.Sleep(10);
                }
            }

            var savedGardianSteps = new List<Point>(this.GardianSteps.Distinct().Take(new Range(1, this.GardianSteps.Count)));
            this.GardianSteps.Clear();
            this.MemoryMap = [];
            this.map = "";
            var listObstaclePlacing = new ConcurrentBag<Tuple<bool, Point>>();
            if (this.TestMode)
            {
                savedGardianSteps.ForEach(s =>
                {
                    var day6 = new Day6() { TestMode = this.TestMode };
                    day6.InitGame();
                    day6.AddObstacle(s);
                    var bloqued = false;
                    while (day6.Walk())
                    {
                        Console.Clear();
                        Console.WriteLine(day6.MemoryMapToString());
                        Thread.Sleep(1);
                        if (day6.IsInLoop())
                        {
                            bloqued = true;
                            break;
                        }
                    }
                    if (bloqued)
                    {
                        listObstaclePlacing.Add(new Tuple<bool, Point>(bloqued, s));
                    }
                });
            }
            else
            {
                var done = 0;
                Parallel.ForEach(savedGardianSteps, (s) =>
                {
                    var day6 = new Day6() { TestMode = this.TestMode, SaveSteps = false };
                    day6.InitGame();
                    day6.AddObstacle(s);
                    var bloqued = false;
                    while (day6.Walk())
                    {
                        if (day6.IsInLoop())
                        {
                            bloqued = true;
                            break;
                        }
                    }
                    done++;
                    if (bloqued)
                    {
                        listObstaclePlacing.Add(new Tuple<bool, Point>(bloqued, s));
                    }
                });
            }

            this.ListObstaclePlacing = [.. listObstaclePlacing];
        }

        private void AddObstacle(Point s)
        {
            this.MemoryMap[s.Y][s.X] = 6;
        }

        public Int32 GetResult()
        {
            return this.ListObstaclePlacing.Where(o => o.Item1).ToList().ConvertAll(o => o.Item2).Distinct().Count();
        }

        private bool IsInLoop()
        {
            if (this.PlayerObstacleDetection == 0)
            {
                return false;
            }
            if (this.PlayerObstacleDetection > 1)
            {
                return true;
            }
            if(this.Step > this.CaseNumber)
            {
                if (this.LastMap == this.MemoryMapToString())
                {
                    this.PlayerLoopDetection++;
                }
                else
                {
                    this.PlayerLoopDetection = 0;
                    this.LastMap = this.MemoryMapToString();
                    return false;
                }
                if (this.PlayerLoopDetection > 10)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            } else
            {
                return false;
            }
            
        }

        public bool Walk()
        {
            this.Step++;
            var nextGardianPosition = this.GetNexPosition();
            if (nextGardianPosition.X >= this.MapSize.Item1 || nextGardianPosition.Y >= this.MapSize.Item2 || nextGardianPosition.X < 0 || nextGardianPosition.Y < 0)
            {
                return false;
            }
            var previousStepMark = DirectionToInt(this.GardianDirection);

            while (this.MemoryMap[nextGardianPosition.Y][nextGardianPosition.X] == 3 || this.MemoryMap[nextGardianPosition.Y][nextGardianPosition.X] == 6)
            {
                if (this.MemoryMap[nextGardianPosition.Y][nextGardianPosition.X] == 6)
                {
                    this.PlayerObstacleDetection++;
                }
                this.MakeTurn();
                previousStepMark = 5;
                nextGardianPosition = this.GetNexPosition();
            }

            this.MakeStep(nextGardianPosition, previousStepMark);
            return true;
        }

        private void MakeStep(Point nextGardianPosition, int stepMark)
        {
            if (this.TestMode && this.GardianSteps.Count(s => s == this.GardianPopsition) > 1)
            {
                stepMark = 5;
            }

            this.MemoryMap[this.GardianPopsition.Y][this.GardianPopsition.X] = stepMark;
            this.GardianPopsition = nextGardianPosition;
        }

        public string MemoryMapToString()
        {
            return string.Join("\r\n", this.MemoryMap.ToList().ConvertAll(l => string.Join("", l.ToList().ConvertAll(c => this.IntToStringConvnerteur(c)))));
        }

        private static int DirectionToInt(GARDIAN_DIRECTION direction)
        {
            return direction switch
            {
                GARDIAN_DIRECTION.UP or GARDIAN_DIRECTION.DOWN => 1,
                GARDIAN_DIRECTION.LEFT or GARDIAN_DIRECTION.RIGHT => 4,
                _ => throw new NotImplementedException(),
            };
        }

        private Point GetNexPosition()
        {
            var currentGardianPosition = this.GardianPopsition;
            _ = this.GardianDirection switch
            {
                GARDIAN_DIRECTION.UP => currentGardianPosition.Y--,
                GARDIAN_DIRECTION.DOWN => currentGardianPosition.Y++,
                GARDIAN_DIRECTION.LEFT => currentGardianPosition.X--,
                GARDIAN_DIRECTION.RIGHT => currentGardianPosition.X++,
                _ => throw new NotImplementedException(),
            };
        return currentGardianPosition;
        }

        private void MakeTurn()
        {
            this.GardianDirection = this.GardianDirection switch
            {
                GARDIAN_DIRECTION.UP => GARDIAN_DIRECTION.RIGHT,
                GARDIAN_DIRECTION.RIGHT => GARDIAN_DIRECTION.DOWN,
                GARDIAN_DIRECTION.DOWN => GARDIAN_DIRECTION.LEFT,
                GARDIAN_DIRECTION.LEFT => GARDIAN_DIRECTION.UP,
                _ => throw new NotImplementedException(),
            };
        }

        public enum GARDIAN_DIRECTION
        {
            UP,
            DOWN,
            LEFT,
            RIGHT
        }
    }
}
